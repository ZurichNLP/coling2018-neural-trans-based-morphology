#!/usr/bin/make -rRf
EXP_MAKEFILE:=$(lastword $(MAKEFILE_LIST))

# default to low if not set from environment
# SETTING=medium make -f exp0.conf.mk cv-x-target
SETTING?=low

# output additional information
# if set to 1
CVDBG?=

# ignore the output 
SETPYTHONENVIRONMENT?=source anaconda2.sh > /dev/null

XVN2OPTIONS:= mk/exp0.xvn2options.inc.perl
RESULTSDIR?=../results-july
#RESULTSDIR:=../results
$(mkdir -p $(RESULTSDIR))
DATADIR?=../data/all/task1

EXP ?= exp0 # sollte EXP.conf.mk und matchen

# ensure that the build rules are rebuilt unconditionally
#$(warning $(realpath $(EXP_MAKEFILE)))
#$(shell $(MAKE) -f $(realpath $(EXP_MAKEFILE)) test-rules)


# determine the maximum sequence length generated by the RNN
# This defines the percentile of all strings that should be included 
MAXSEQLENPERCENTILE?=99.5

CONLLTASK1DATA:=conll2017/all/task1
# source anaconda2.sh; # make sure your environment is correctly set
PYTHONCALL?=python
MKDIR?=mkdir -p $(@D) 

LNG+=albanian
LNG+=arabic
LNG+=armenian
LNG+=basque
LNG+=bengali
LNG+=bulgarian
LNG+=catalan
LNG+=czech
LNG+=danish
LNG+=dutch
LNG+=english
LNG+=estonian
LNG+=faroese
LNG+=finnish
LNG+=french
LNG+=georgian
LNG+=german
LNG+=haida
LNG+=hebrew
LNG+=hindi
LNG+=hungarian
LNG+=icelandic
LNG+=irish
LNG+=italian
LNG+=khaling
LNG+=kurmanji
LNG+=latin
LNG+=latvian
LNG+=lithuanian
LNG+=lower-sorbian
LNG+=macedonian
LNG+=navajo
LNG+=northern-sami
LNG+=norwegian-bokmal
LNG+=norwegian-nynorsk
LNG+=persian
LNG+=polish
LNG+=portuguese
LNG+=quechua
LNG+=romanian
LNG+=russian
ifneq ($(SETTING),high)
LNG+=scottish-gaelic
endif
LNG+=serbo-croatian
LNG+=slovak
LNG+=slovene
LNG+=sorani
LNG+=spanish
LNG+=swedish
LNG+=turkish
LNG+=ukrainian
LNG+=urdu
LNG+=welsh

# for testing
#LNG:=german
#LNG:=russian
#LNG:=turkish
#LNG:=albanian


SYSTEM?=hard
# Special settings for trans experiments
# low:         --epochs=60 --patience=30  --hidden=200
# medium: --epochs=50 --patience=10  --hidden=200
# high:       --epochs=20 --patience=10  --hidden=200
# 
# So, for each setting we have its own tuple of parameters --epochs and --patience, and we do not vary --hidden (set to default 200).
# We need this for two systems:
# once with --align_dumb, once without this flag




### IMPORTANT every XVNSET variable starts with a string that matches -\w !!

#####################################################################
# CONFIGURATION OF EXPERIMENTAL VARIABLES

# x-{SYSALIGN}-{PATIENCE}-{ADDARGS2}-{EPOCHS}-{HIDDEN}-{BEAM}-{SEED}x
#     XV1SET      XV2SET    XV3SET     XV4SET   XV5SET   X6SET X7SET
#####################################################################


#####################################################################
# SEPARATE CONFIGURATION BY SYSTEM
# FIRST COMES trans (aka HACM)
# Any modifications go into the second configuration for HAEM
#####################################################################

#ifeq "$(SYSTEM)" "trans"

#####################################################################
# SYSALIGN
# Main architectures and alignment strategy
#####################################################################

XV1SET := -strdmb
XV1SET += -strcrp

#####################################################################
# PATIENCE
# Patience on development set 
#####################################################################

ifeq "$(SETTING)" "low"
XV2SET := -a30
else ifeq "$(SETTING)" "medium"
XV2SET := -a20
else ifeq "$(SETTING)" "high"
XV2SET := -a10
endif

#####################################################################
# UNUSED
# Not yet used 
#####################################################################

XV3SET := -o

#####################################################################
# EPOCHS
# Maximal number or training epochs
# Now consistently set to 100 for ALL systems
# PATIENCE should make stop it earlier anyways
#####################################################################

XV4SET := -e100

#####################################################################
# HIDDEN
# Parameter H of memory cells in the LSTMs
# Consistent value of 200 for ALL systems 
#####################################################################

XV5SET := -h200

#####################################################################
# NBEST
# Size of n-best beam; still just 1 due to efficiency problems
# Larger beam sizes can be added later without regenerating the existing stuff
#####################################################################

XV6SET += -b1

#####################################################################
# SEED
# Seed of individual systems (also defines the number of members in
# ensembles. 
# Consistently set to 5 now. It will take some time to compute on high
#####################################################################

XV7SET := -r1
XV7SET += -r2
#XV7SET += -r3
#XV7SET += -r4
#XV7SET += -r5

#endif ## ($(SYSTEM),trans)


#####################################################################
# SEPARATE CONFIGURATION BY SYSTEM
# SECOND COMES hard (aka HAEM)
# Now mostly the same settings as in HACM!
# Only explicit changes are set in the configuration for hard
#####################################################################

ifeq "$(SYSTEM)" "hard"

#####################################################################
# SYSALIGN
# Main architectures and alignment strategy
#####################################################################

XV1SET := -shdmixdmb
XV1SET += -shdmix

#####################################################################
# PATIENCE
# Patience on development set 
#####################################################################


#####################################################################
# UNUSED
# Not yet used 
#####################################################################


#####################################################################
# EPOCHS
# Maximal number or training epochs
# Now consistently set to 100 for ALL systems
# PATIENCE should make stop it earlier anyways
#####################################################################


#####################################################################
# HIDDEN
# Parameter H of memory cells in the LSTMs
# Consistent value of 200 for ALL systems 
#####################################################################


#####################################################################
# NBEST
# Size of n-best beam; still just 1 due to efficiency problems
# Larger beam sizes can be added later without regenerating the existing stuff
#####################################################################


#####################################################################
# SEED
# Seed of individual systems (also defines the number of members in
# ensembles. 
# Consistently set to 5 now. It will take some time to compute on high
#####################################################################


endif ## ($(SYSTEM),hard)




### test with touch mk/*meta & SETTING=??? make -f exp0.conf.mk cv-x-target -n
# up to XV9SET


include cv-make/cv-setup.mk
ifdef $(CVDBG)
$(warning XVSET, $(XVSET))
endif
###############################################################################
# START OF cv-d-target
###############################################################################

### File-List: cv-d-files
# All files for cv data preparation

# SC: No data files needed for this project
cv-d-files += 

#$(warning cv-d-files:$(cv-d-files))

cv-d-target: $(cv-d-files)

###############################################################################
# START OF cv-x-target
###############################################################################

### File-List: cv-x-files
# All files for cv experimentation

# 
# s{SEED}/x-{SYSTEM}-{ADDITIONALARGS}-{ADDITIONALARGS2}-{EPOCHS}-{HIDDEN}-{BEAM}-x/{LNG}-{SETTING}.best.dev

cv-x-files += $(foreach q,$(SETTING),$(foreach l,$(LNG),$(foreach x,$(XVSET),$(RESULTSDIR)/$(x)/$(l)-$(q).best.dev))) # see exp0.rules.mk.meta
ifdef $(CVDBG)
$(warning cv-x-files:$(cv-x-files))
endif
cv-x-target: $(cv-x-files)

###############################################################################
# START OF cv-e-target
###############################################################################

### File-List: cv-e-files
# All files for cv evaluation


#cv-e-files += $(foreach lt,$(LNG),$(foreach v,$(V1V2V3V4V5V6V7SET),$(EXP_D)/t/x$v-x/$(lt).model.dev.predict.tsv)) # see exp0.rules.mk.meta


cv-e-target: $(cv-e-files)

###############################################################################
# Create overall stats
###############################################################################

make-dev-stats:
	cd $(RESULTSDIR); \
	mkdir -p stats-$(SETTING).d; \
	for d in $$(ls -d  x* ) ; do \
		printf "LANG\t%s\n" $$d > stats-$(SETTING).d/$$d.tsv ; \
		for l in $(LNG) ; do \
			if test -e  $$d/$$l-$(SETTING).best.dev ; then \
				printf "%s\t%1.3f\n" $$l $$(awk '/Accuracy/ {print $$4}'  < $$d/$$l-$(SETTING).best.dev  ); \
			else \
				printf "%s\tn/a\n" $$l ; \
			fi ; \
		done >> stats-$(SETTING).d/$$d.tsv; \
	done  ; \
	paste stats-$(SETTING).d/x-*.tsv | perl -ln -e 's/\bx-//g;s/-x\b//g;s/LANG\t//g;s/(\t|^)[[a-z]+-?[a-z]+\t/\t/g;s/\t+/\t/g;s/^\t//; print;' | \
	python -c 'import pandas,sys;df=pandas.read_table(sys.argv[1],na_values="n/a");df.dropna(axis=1,how="all",inplace=True);df.to_csv(sys.argv[2],sep="\t",na_rep="n/a",index=False) ' /dev/stdin  stats-$(SETTING).d/all.tsv ;\
	echo "TODO on $(SETTING):" $$(tail -n +2 stats-$(SETTING).d/all.tsv|tr "\t" "\n"|grep -c "n/a"); \
	echo "SEE results at $$(readlink -f stats-$(SETTING).d/all.tsv)" 
	

###############################################################################
# Create ensemble systems
# x-shdmix-a-o-e30-h100-b1-r5-x/faroese-low.best.test.test.predictions.nbest
###############################################################################

make-ensembles:
	for d in $$(ls -d  $(RESULTSDIR)/x*-r1-x ) ; do \
		for l in $(LNG) ; do \
			export FILES=$$(ls -d $${d%1-x}{1,2,3,4,5}-x/$$l-$(SETTING).best.test.test.predictions.nbest 2> /dev/null || true); \
			if test -n "$${FILES}"  ; then \
				mkdir -p $${d%1-x}0-x ;\
				echo "Creating $${d%1-x}0-x/$$l-$(SETTING).best.test.test.predictions.nbest" 2>&1 ; \
				echo ensemble_from_output.py $${FILES} 2>&1  ; \
				./ensemble_from_output.py $${FILES}  > $${d%1-x}0-x/$$l-$(SETTING).best.test.test.predictions.nbest 2> $${d%1-x}0-x/$$l-$(SETTING).best.test.test.predictions.nbest.err ; \
				wc -l  $${d%1-x}0-x/$$l-$(SETTING).best.test.test.predictions.nbest 2>&1 ;\
			fi \
		done ; \
	done


###############################################################################
# Create ensemble systems
# x-shdmix-a-o-e30-h100-b1-r5-x/faroese-low.best.test.test.predictions.nbest
###############################################################################

make-ensembles-test:
	for d in $$(ls -d  $(RESULTSDIR)/x*-r1-x ) ; do \
		for l in $(LNG) ; do \
			export FILES=$$(ls -d $${d%1-x}{1,2,3,4,5}-x/$$l-$(SETTING).best.test.test.predictions.nbest 2> /dev/null || true); \
			if test -n "$${FILES}"  ; then \
				mkdir -p $${d%1-x}0-x ;\
				echo "Creating $${d%1-x}0-x/$$l-$(SETTING).best.test.test.predictions.nbest" 2>&1 ; \
				echo ensemble_from_output.py $${FILES} 2>&1  ; \
				./ensemble_from_output_dev.py --test_only --pred_out $${d%1-x}0-x/$$l-$(SETTING).best.test.test.predictions.nbest --result_out $${d%1-x}0-x/$$l-$(SETTING).test.dev --lang $$l --input $${FILES} > $${d%1-x}0-x/$$l-$(SETTING).best.test.predictions.nbest.err ; \
				wc -l  $${d%1-x}0-x/$$l-$(SETTING).best.test.test.predictions.nbest 2>&1 ;\
			fi \
		done ; \
	done



###############################################################################
# Create ensemble systems
# x-shdmix-a-o-e30-h100-b1-r5-x/faroese-low.best.test.test.predictions.nbest
###############################################################################

make-ensembles-r00:
	#
	# Creating make-ensembles-r00
	for l in $(LNG) ; do \
			mkdir -p   $(RESULTSDIR)/x-r00-x/ ;\
			./ensemble_from_output.py $(RESULTSDIR)/x-*-r0-x/$$l-$(SETTING).best.test.test.predictions.nbest  > $(RESULTSDIR)/x-r00-x/$$l-$(SETTING).best.test.test.predictions.nbest 2> $(RESULTSDIR)/x-r00-x/$$l-$(SETTING).best.test.test.predictions.nbest.err ; \
			wc -l $(RESULTSDIR)/x-r00-x/$$l-$(SETTING).best.test.test.predictions.nbest 2>&1 ; \
	done


###############################################################################
# Create ensemble systems for dev
# x-shdmix-a-o-e30-h100-b1-r5-x/faroese-low.best.dev.predictions.nbest
# x-shdmix-a-o-e30-h100-b1-r5-x/faroese-low.best.dev
###############################################################################

make-ensembles-dev:
	for d in $$(ls -d  $(RESULTSDIR)/x*-r1-x ) ; do \
		for l in $(LNG) ; do \
			export FILES=$$(ls -d $${d%1-x}{1,2,3,4,5}-x/$$l-$(SETTING).best.dev.predictions.nbest 2> /dev/null || true); \
			if test -n "$${FILES}"  ; then \
				mkdir -p $${d%1-x}0-x ;\
				#export PRED_OUT=$($${d%1-x}0-x/$$l-$(SETTING).best.dev.predictions.nbest) ; \
				#echo "Creating $${PRED_OUT}" 2>&1 ; \
				#export RESULT_OUT=$($${d%1-x}0-x/$$l-$(SETTING).best.dev) ; \
				echo ensemble_from_output_dev.py --pred_out $${d%1-x}0-x/$$l-$(SETTING).best.dev.predictions.nbest --result_out $${d%1-x}0-x/$$l-$(SETTING).best.dev --lang $$l --input $${FILES} 2>&1  ; \
				./ensemble_from_output_dev.py  --pred_out $${d%1-x}0-x/$$l-$(SETTING).best.dev.predictions.nbest --result_out $${d%1-x}0-x/$$l-$(SETTING).best.dev --lang $$l --input $${FILES}> $${d%1-x}0-x/$$l-$(SETTING).best.dev.predictions.nbest.err ; \
				wc -l  $${d%1-x}0-x/$$l-$(SETTING).best.dev.predictions.nbest 2>&1 ;\
			fi \
		done ; \
	done

# ensemble of ensembles
make-ensembles-dev-r00:
	#
	# CREATING $(RESULTSDIR)/x-r00-$*-x/
	for l in $(LNG) ; do \
			mkdir -p $(RESULTSDIR)/x-r00-all-x/ ;\
			./ensemble_from_output_dev.py --pred_out $(RESULTSDIR)/x-r00-all-x/$$l-$(SETTING).best.dev.predictions.nbest --result_out $(RESULTSDIR)/x-r00-all-x/$$l-$(SETTING).best.dev --lang $$l --input $(RESULTSDIR)/x-*-r0-x/$$l-$(SETTING).best.dev.predictions.nbest > $(RESULTSDIR)/x-r00-all-x/$$l-$(SETTING).best.dev.predictions.nbest.err ; \
	done

# ensemble of ensembles for a given system

make-all-ensembles-dev-r00: make-ensembles-dev-r00-shdmix- make-ensembles-dev-r00-shdmixdmb- make-ensembles-dev-r00-strdmb- make-ensembles-dev-r00-strcrp- make-ensembles-dev-r00-str make-ensembles-dev-r00-shd make-ensembles-dev-r00

# patterm rule for all ensemble system but r00-all
make-ensembles-dev-r00-%:
	#
	# CREATING $(RESULTSDIR)/x-r00-$*-x/
	for l in $(LNG) ; do \
			export FILES=$$(ls -d $(RESULTSDIR)/x-$**-r0-x/$$l-$(SETTING).best.dev.predictions.nbest  2> /dev/null || true); \
			if test -n "$${FILES}"  ; then \
			mkdir -p $(RESULTSDIR)/x-r00-$(*:-=)-x/ ;\
			./ensemble_from_output_dev.py --pred_out $(RESULTSDIR)/x-r00-$(*:-=)-x/$$l-$(SETTING).best.dev.predictions.nbest --result_out $(RESULTSDIR)/x-r00-$(*:-=)-x/$$l-$(SETTING).best.dev --lang $$l --input $(RESULTSDIR)/x-$**-r0-x/$$l-$(SETTING).best.dev.predictions.nbest > $(RESULTSDIR)/x-r00-$(*:-=)-x/$$l-$(SETTING).best.dev.predictions.nbest.err ; \
			fi \
	done


make-dev-diffs:
	#
	# CREATING diffs for dev sets
	for d in $$(ls -d  $(RESULTSDIR)/x-*-x ) ; do \
		for l in $(LNG) ; do \
			if test -e $$d/$$l-$(SETTING).best.dev.predictions.nbest ; then \
				paste ../data/all/task1/$${l}-dev $$d/$$l-$(SETTING).best.dev.predictions.nbest |gawk -v FS=$$'\t' -v OFS=$$'\t'  ' $$5 != $$2 { print $$1,$$2,$$3,$$5 } '  > $$d/$$l-$(SETTING).best.dev.predictions.nbest.diff.txt ;\
			fi \
		done \
	done
ifdef $(CVDBG)
$(warning $(MAIN_D)/)
endif

# Make sure the directory exists
$(shell mkdir -p $(EXP_D)/mk.d/)
include $(EXP_D)/mk.d/$(EXP).Rules.mk


define x2option
$(shell perl   cv-make/lib/xvn2options.perl -file $(XVN2OPTIONS)  -- $1  2> /dev/null)
endef

# first => rst: strip first two characters (typically -a options)
define rst
$(call substr,$1,$(call strlen,$1))
endef

# Call one shell per recipe line
#.ONESHELL:


SHELL:=/bin/bash
